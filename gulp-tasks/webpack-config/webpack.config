var _ = require('lodash');
var path = require('path');
var webpack = require('webpack');
var merge = require('webpack-merge');
var CopyWebpackPlugin = require('copy-webpack-plugin');
var HtmlWebpackPlugin = require('html-webpack-plugin');
var ExtractTextPlugin = require('extract-text-webpack-plugin');
var OptimizeCSSPlugin = require('optimize-css-assets-webpack-plugin');

module.exports = function(config) {
    var self = this;
    self.config = config;
    var baseWebpackConfig = require('./webpack.base.config')(config);
    var plugins = [
        new webpack.optimize.UglifyJsPlugin({
            // 最紧凑的输出
            beautify: false,
            // 删除所有的注释
            comments: false,
            compress: {
                // 在UglifyJs删除没有用到的代码时不输出警告
                warnings: false,
                // 删除所有的 `console` 语句，true：删除 false：不删除
                // 还可以兼容ie浏览器
                drop_console: self.config.env === 'production',
                // 内嵌定义了但是只用到一次的变量
                collapse_vars: true,
                // 提取出出现多次但是没有定义成变量去引用的静态值
                reduce_vars: true
            },
            sourceMap: self.config[self.config.env]['sourceMap']
        }),
        // extract css into its own file
        new ExtractTextPlugin({
            filename: self.config.assetsPath('css/[name].css')
        }),
        // Compress extracted CSS. We are using this plugin so that possible
        // duplicated CSS from different components can be deduped.
        new OptimizeCSSPlugin({
            cssProcessorOptions: {
                safe: true
            }
        }),
        // split vendor js into its own file
        new webpack.optimize.CommonsChunkPlugin({
            name: 'vmain',
            minChunks: function(module, count) {
                // any required modules inside node_modules are extracted to vendor
                return (
                    module.resource &&
                    /\.js$/.test(module.resource) &&
                    module.resource.indexOf(
                        path.join(self.config.base, 'node_modules')) === 0
                )
            }
        }),
        //导出webpack库
        new webpack.optimize.CommonsChunkPlugin({
            name: 'vuelibs',
            chunks: ['vmain']
        })
    ];

    //使用生产状态
    if (self.config.env === 'production') {
        // 线上模式的配置，去除依赖中重复的插件/压缩js/排除报错的插件
        plugins = _.union(plugins, [
            new webpack.optimize.DedupePlugin(),
            new webpack.NoErrorsPlugin(),
            new webpack.DefinePlugin({
                'process.env': self.config.env
            })
        ]);
    }

    var defaultConfig = {
        module: {
            rules: config.styleLoaders({
                sourceMap: self.config[self.config.env]['sourceMap'],
                extract: true
            })
        },
        devtool: self.config[self.config.env]['sourceMap'] ? 'source-map' : false,
        output: {
            path: self.config[self.config.env]['assetsRoot'],
            filename: self.config.assetsPath('js/app/[name].js'),
            chunkFilename: self.config.assetsPath('js/app/[id].js')
        },
        plugins: plugins
    }

    //复制静态文件
    if (self.config.assets_custom_static) {
        defaultConfig.plugins.push(new CopyWebpackPlugin([{
            from: self.config.assets_custom_static,
            to: self.config[self.config.env]['assetsSubDirectory'],
            ignore: ['.*']
        }]));
    }
    var webpackConfig = merge(baseWebpackConfig, defaultConfig)

    if (self.config[self.config.env]['productionGzip']) {
        var CompressionWebpackPlugin = require('compression-webpack-plugin')

        webpackConfig.plugins.push(
            new CompressionWebpackPlugin({
                asset: '[path].gz[query]',
                algorithm: 'gzip',
                test: new RegExp(
                    '\\.(' +
                    self.config[self.config.env]['productionGzipExtensions'].join('|') +
                    ')$'
                ),
                threshold: 10240,
                minRatio: 0.8
            })
        )
    }

    if (self.config[self.config.env]['bundleAnalyzerReport']) {
        var BundleAnalyzerPlugin = require('webpack-bundle-analyzer').BundleAnalyzerPlugin
        webpackConfig.plugins.push(new BundleAnalyzerPlugin())
    }
    return webpackConfig;
}