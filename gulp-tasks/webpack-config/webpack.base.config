var path = require('path')
var glob = require('glob')

module.exports = function(config) {
    var vueLoaderConfig = require('./vue-loader.config')(config)
        //获得js文件的路径
    const entries = {};
    glob.sync(config.source + '/app/**/app.js').forEach(p => {
        var chunk = p.split('/app/')[1].split('/app.js')[0];
        chunk = chunk.substr(0, chunk.indexOf('.js'));
        entries[chunk] = path.resolve(p)
    })
    return {
        entry: entries, //配置入口文件，有几个写几个
        output: {
            //输出目录的配置，模板、样式、脚本、图片等资源的路径配置都相对于它
            path: config[config.env]['assetsRoot'],
            //每个页面对应的主js的生成配置
            filename: '[name].js',
            //模板、样式、脚本、图片等资源对应的server上的路径
            publicPath: config[config.env]['assetsPublicPath']
        },
        resolve: {
            extensions: ['.js', '.vue', '.json'],
            alias: {
                'vue$': 'vue/dist/vue.esm.js',
                '@': config.source
            }
        },
        watch: false,
        profile: true,
        cache: true,
        module: {
            rules: [{
                    test: /\.vue$/,
                    loader: 'vue-loader',
                    options: vueLoaderConfig
                },
                { //只对项目目录下src目录里的代码进行babel编译
                    test: /\.js$/,
                    loader: 'babel-loader?cacheDirectory', //开启babel-loader缓存, 复用缓存结果减少编译流程
                    // include: [config.source, config.test]
                    include: [config.source]
                },
                {
                    test: /\.(png|jpe?g|gif|svg)(\?.*)?$/,
                    loader: 'url-loader',
                    options: {
                        limit: 10000,
                        name: config.assetsPath('img/[name].[ext]')
                    }
                },
                {
                    test: /\.(woff2?|eot|ttf|otf)(\?.*)?$/,
                    loader: 'url-loader',
                    options: {
                        limit: 10000,
                        name: config.assetsPath('fonts/[name].[ext]')
                    }
                },
                {
                    test: /\.modernizrrc$/,
                    loader: "modernizr"
                }
            ]
        }
    }
}